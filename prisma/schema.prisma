datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  categories    Category[]
  settings      Settings?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  currency String

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  icon String
  type String @default("income")

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId, type])
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  type        String   @default("income")
  date        DateTime

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  category     String
  categoryIcon String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float
}

model YearHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String
  month   Int
  year    Int
  income  Float
  expense Float
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
